
close all;

% roll angle autopilot
s = tf('s');

aileron_roll_tf = -1/s * tf(aileron_to_rollrate_num, lateral_den);

tau_a = 0.05;
Ha = 1 / (tau_a * s + 1);

G = Ha * aileron_roll_tf;



figure;
rlocus(G);
sgrid([0.8, 0], [100, 1]);
xlim([-2.5, 0.5])
ylim([-5,5])
hold on;
k1=1.24;
k2 = 0.75;
r1 = rlocus(G, k1);
h1 = plot(real(r1), imag(r1), 'v', 'MarkerSize', 5);
r2 = rlocus(G, k2);
h2 = plot(real(r2), imag(r2), '^', 'MarkerSize', 5);
legend([h1, h2], {['k = ' num2str(k1)], ['k = ' num2str(k2)]}, 'Location', 'southeast')
hold off;
print('exercise4\figures\roll_autopilot_locus_uncompensated', '-dpng', '-r600');



legend_labels = {};
figure;
hold on;

for k = [ 1.24, 0.75]
    step(feedback(k*G, 1));

    legend_labels{end + 1} = ['k = ', num2str(k)];
end

yline(1.1, '--', 'Overshoot limit');
yline(1.05, '--', 'Subsequent Overshoot');
legend(legend_labels, 'Location', 'southeast')
hold off;
grid on;
print('exercise4\figures\roll_autopilot_step_uncompensated', '-dpng', '-r600');


%% Compensated:
% doesnt technically need it but it will be explored.

Tc = 0.05;
Td = 0.6;
alpha = 1/(Tc*1.6^2);
lead_compensator = (1 + Tc*s) / (1 + alpha*Tc*s);
derivative = (1 + Td*s);
Gd = Ha * derivative * aileron_roll_tf;

figure;
k = 3.27;
rlocus(Gd);
hold on;
r = rlocus(Gd, k);
h = plot(real(r), imag(r), 'v', 'MarkerSize', 5);
hold off;
sgrid([0.8, 0], [100, 1]);
legend(h, ['k = ' num2str(k)])

%
legend_labels = {};
figure;
hold on;

for k = [1 3 3.27]
    step(feedback(k*Gd, 1));

    legend_labels{end + 1} = ['k = ', num2str(k)];
end

yline(1.1, '--', 'Overshoot limit');
yline(1.05, '--', 'Subsequent Overshoot');
legend(legend_labels, 'Location', 'southeast')
hold off;
grid on;


[Y, T] = step(CL);
step_response = stepinfo(Y,T);
rise_time = step_response.RiseTime;
settle_times = step_response.RiseTime;
peak_time = step_response.PeakTime;
overshoot = step_response.Overshoot;

